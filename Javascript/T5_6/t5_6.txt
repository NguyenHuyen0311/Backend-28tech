28tech—Javascript (t5+6)
🏵️DOM (Document Object Model)
🎗️Khái niệm DOM
*DOM là gì?
-Là mô hình các đối tượng trong tài liệu HTML
-Để lấy được các thẻ HTML
-Gồm 3 thành phần: Element, Attribute, Text
*Nhiệm vụ của DOM Javascript
-Lấy ra các thẻ HTML
-Thay đổi các thuộc tính của thẻ HTML
-Thay đổi CSS của các thẻ HTML
-Tạo, xoá, thêm các thẻ HTML
*Các loại DOM trong Javascript
+ DOM document: Để chứa toàn bộ các phần tử HTML
+ DOM element: Để lấy ra các thẻ HTML
+ DOM HTML: Để thay đổi nội dung và thuộc tính của các thẻ HTML
+ DOM CSS: Để thay đổi CSS của thẻ HTML
+ DOM Event: Để gán các sự kiện vào các thẻ HTML
+ DOM Listener: Để lắng nghe các sự kiện tác động lên thẻ HTML
+ DOM Navigation: Thể hiện mối quan hệ cha-con của các thẻ HTML
+ DOM Nodes: Để thao tác với HTML thông qua đối tượng (Object)
🎗️DOM Element
-getElementById
+ Để lấy ra một thẻ HTML theo id
+ Kết quả sẽ trả về 1 phần tử
+ Cú pháp:
var element = document.getElementById(‘idName’);
-getElementsByTagName
+ Để lấy ra một thẻ HTML theo tên thẻ
+ Kết quả sẽ trả về 1 mảng các object
+ Cú pháp:
var element = document. getElementsByTagName(‘tagName’);
-getElementsByClassName
+ Để lấy ra một thẻ HTML theo class
+ Kết quả sẽ trả về 1 mảng các object
+ Cú pháp:
var element = document. getElementsByClassName(‘className’);
-querySelector
+ Để lấy ra một thẻ HTML theo trọn bộ trong CSS
+ Kết quả sẽ trả về 1 phần tử
+ Cú pháp:
var element = document.querySelector(‘selector’);
-querySelectorAll
+ Để lấy ra một thẻ HTML theo bộ trọn trong CSS
+ Kết quả sẽ trả về 1 mảng các object
+ Cú pháp:
var element = document.querySelectorAll(‘selector’);
🎗️DOM HTML
*Nội dung trong thẻ HTML
-Lấy nội dung: Để lấy nội dung của một element dùng innerHTML
-Thay đổi nội dung: Để thay đổi nội dung của một element dùng innerHTML và gán lại giá trị
*Thuộc tính thẻ HTML
-Lấy giá trị của thuộc tính: Để lấy giá trị của thuộc tính HTML sử dụng getAttribute()
-Thay đổi giá trị của thuộc tính: Để thay đổi giá trị của thuộc tính HTML sử dụng setAttribute()
🎗️DOM CSS
-Cú pháp thiết lập giá trị:
document.getElementById(“idName”).style.propertyName = “value”;
-Cú pháp lấy giá trị:
document.getElementById(“idName”).style.propertyName;
☠️Lưu ý:
+ Tên thuộc tính viết theo kiểu camelCase
+ Ví dụ: font-size->fontSize
🎗️ DOM Events
-Dom Event (sự kiện) là một tác động nào đó lên thẻ HTML
-Để bắt được sự kiện và thực thi một chương trình
-Cú pháp:
element.eventname = function () {
       // code
}
Trong đó:
+element: là phần tử muốn bắt sự kiện
+eventname: tên sự kiện
-Danh sách một số DOM Events phổ biến
Sự kiện Mô tả
onload Khi trình duyệt đã load xong mọi thứ (image, js, css) thì những đoạn code nằm bên trong đó mới được chạy 
onblur Kích hoạt khi một phần tử mất trọng tâm (không được focus vào nữa)
onfocus Kích hoạt khi một phần tử hiển thị đúng trọng tâm (được focus vào)
onkeydown Kích hoạt khi một phím được nhấn
onkeyup Kích hoạt khi một phím được nhả ra
onclick Kích hoạt trên con chuột vừa nhấn vào phần tử
onchange Kích hoạt khi giá trị được thay đổi khác đi so với giá trị trước đó 
🎗️DOM Events Listener
-DOM Events Listener giống DOM Events nhưng khác ở chỗ:
+ Một element có thể gọi được nhiều sự kiện 
+ Có thể huỷ bỏ lắng nghe sự kiện bất kỳ (DOM Events chỉ lắng nghe được nhưng không huỷ bỏ lắng nghe được)
+Cú pháp:
element.addElementListener(“eventname”, function (e) {
       // code
});
Trong đó:
* element: là phần tử muốn bắt sự kiện
* eventname: Tên sự kiện (bỏ chữ on, Ví dụ: onclick->click)
🎗️DOM Navigation
-Thể hiện mối quan hệ cha-con của các thẻ HTML
-Các thuộc tính:
+ parentNode: Truy cập phần tử cha
+ childNodes: Truy cập vào các phần tử con
+ firstElementChild: Truy cập vào phần tử con đầu tiên
+ lastElementChild: Truy cập vào phần tử con cuối cùng
+ nextElementSibling: Truy cập vào phần tử kế tiếp
+ previousElementSibling: Truy cập vào phần tử trước đó
+ nodeName: Lấy ra tên node
🎗️DOM Nodes
-document.createElement()
+ Tạo ra một phần tử HTML
+ Cú pháp:
var tenBien = document.createElement(“tagName”);
Trong đó: tagName là tên thẻ (p, h1, div,…)
-document.createTextNode()
+ Tạo ra một chuỗi văn bản
+ Cú pháp:
var tenBien = document.createTextNode(“Nội dung…”);
-appendChild()
+ Dùng để thêm vào vị trí cuối dùng của một thẻ HTML khác
+ Cú pháp:
element_parent.appendChild(node_insert)
Trong đó: 
* element_parent: là phần tử cha
* node_insert: là node bạn muốn thêm vào
-insertBefore()
+ Dùng để thêm một Node vào đằng trước một node con nào đó
+ Cú pháp:
element_parent.insertBefore
(node_insert, node_child);
Trong đó:
* element_parent: là phần tử cha
* node_insert: là node bạn muốn thêm vào
* node_child: là node con mà bạn muốn thêm node_insert vào đằng trước nó
-removeChild()
+ Dùng để xoá một node con ra khỏi node cha
+ Cú pháp:
element_parent.removeChild
(node_remove);
Trong đó:
* element_parent: là phần tử cha
* node_remove: là node cần xoá
-replaceChild()
+ Dùng để thay thế một node con bằng một node mới
+ Cú pháp:
element_parent.replaceChild
(node_insert, node_remove);
Trong đó:
* element_parent: là phần tử cha
* node_insert: là node bạn muốn thay thế
* node_remove: là node cũ muốn bỏ đi